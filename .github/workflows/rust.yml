name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Build gnu-linux on ubuntu-18.04 and musl on ubuntu latest
        # os: [ ubuntu-18.04, ubuntu-latest, windows-latest, macos-latest ]
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    name: Building, ${{ matrix.os }}
    steps:
      - name: Fix CRLF on Windows
        if: runner.os == 'Windows'
        run: git config --global core.autocrlf false

      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Build on Linux
        if: runner.os == 'Linux'
        run: |
          cargo build --release
          mkdir bin || true
          cp target/release/enm bin/
          archive="bin/enm-${{ github.event.release.tag_name }}-linux-gnu-amd64.zip"
          asset_name="enm-${{ github.event.release.tag_name }}-linux-gnu-amd64.zip"
          zip -r "${archive}" ./bin/*
          echo "archive=${archive}" >> $GITHUB_ENV
          echo "asset_name=${asset_name}" >> $GITHUB_ENV

      - name: Build on Windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          cargo build --release
          mkdir bin || true
          cp target/release/enm.exe bin/
          archive="bin/enm-${{ github.event.release.tag_name }}-linux-gnu-amd64.zip"
          asset_name="enm-${{ github.event.release.tag_name }}-linux-gnu-amd64.zip"
          zip -r "${archive}" ./bin/*
          echo "archive=${archive}" >> $GITHUB_ENV
          echo "asset_name=${asset_name}" >> $GITHUB_ENV
          archive="bin/enm-${{ github.event.release.tag_name }}-win64.zip"
          asset_name="enm-${{ github.event.release.tag_name }}-win64.zip"
          powershell "Compress-Archive bin/* \"${archive}\""
          echo "archive=${archive}" >> $GITHUB_ENV
          echo "asset_name=${asset_name}" >> $GITHUB_ENV

      - name: Build on MacOS
        if: runner.os == 'macOS'
        run: |
         cargo build --release
          mkdir bin || true
          cp target/release/enm bin/          
          archive="bin/enm-${{ github.event.release.tag_name }}-osx.zip"
          asset_name="enm-${{ github.event.release.tag_name }}-osx.zip"
          zip -r "${archive}" ./bin/*
          echo "archive=${archive}" >> $GITHUB_ENV
          echo "asset_name=${asset_name}" >> $GITHUB_ENV

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: "./${{ env.archive }}"
          asset_name: "${{ env.asset_name }}"
          asset_content_type: application/zip

